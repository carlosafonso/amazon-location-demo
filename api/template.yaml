AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Demo app to showcase Amazon Location Service.

Parameters:
  NotificationEmailAddress:
    Type: String
    Description: The email address that will receive notifications when a device enters or exists a geofence

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: python3.8
    Timeout: 60
    Environment:
      Variables:
        ALS_DEMO_DDB_TABLE_NAME: !Ref DevicesTable
        ALS_DEMO_GEOFENCE_COLLECTION_NAME: !Ref GeofenceCollection
        ALS_DEMO_TRACKER_NAME: !Ref Tracker
        ALS_DEMO_PLACE_INDEX_NAME: !Ref PlaceIndex
        ALS_DEMO_ROUTE_CALCULATOR_NAME: !Ref RouteCalculator

Resources:
  Map:
    Type: AWS::Location::Map
    Properties:
      Configuration:
        Style: VectorEsriNavigation
      MapName: MyMap
      PricingPlan: RequestBasedUsage

  GeofenceCollection:
    Type: AWS::Location::GeofenceCollection
    Properties:
      CollectionName: MyGeofenceCollection
      PricingPlan: RequestBasedUsage

  Tracker:
    Type: AWS::Location::Tracker
    Properties:
      PricingPlan: RequestBasedUsage
      TrackerName: MyTracker

  TrackerConsumer:
    Type: AWS::Location::TrackerConsumer
    Properties:
      ConsumerArn: !Sub arn:aws:geo:${AWS::Region}:${AWS::AccountId}:geofence-collection/${GeofenceCollection}
      TrackerName: MyTracker

  PlaceIndex:
    Type: AWS::Location::PlaceIndex
    Properties:
      DataSource: Here
      IndexName: MyPlaceIndex
      PricingPlan: RequestBasedUsage

  RouteCalculator:
    Type: AWS::Location::RouteCalculator
    Properties:
      CalculatorName: MyRouteCalculator
      DataSource: Here
      PricingPlan: RequestBasedUsage

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: true

  IdentityPoolUnauthedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": "unauthenticated"
      Policies:
        - PolicyName: MapRenderingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'geo:GetMapGlyphs'
                  - 'geo:GetMapSprites'
                  - 'geo:GetMapStyleDescriptor'
                  - 'geo:GetMapTile'
                Resource: '*'
                Condition:
                  StringLike:
                    'aws:Referer':
                      - 'http://localhost:5000/*'

  IdentityPoolUnauthedRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        "unauthenticated": !GetAtt IdentityPoolUnauthedRole.Arn

  Topic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref NotificationEmailAddress
          Protocol: email

  TopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sns:Publish'
            Resource: '*'
      Topics:
        - !Ref Topic

  GeofenceTriggerRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - 'aws.geo'
        detail-type:
          - 'Location Geofence Event'
      State: ENABLED
      Targets:
        - Arn: !Ref Topic
          Id: EmailNotification

  DevicesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: Devices
      PrimaryKey:
        Name: DeviceId
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  ApiFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ApiFunctionsExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'geo:BatchDeleteGeofence'
                  - 'geo:CalculateRoute'
                  - 'geo:ListGeofences'
                  - 'geo:GetDevicePosition'
                  - 'geo:PutGeofence'
                  - 'geo:SearchPlaceIndexForText'
                Resource: '*'
              - Effect: 'Allow'
                Action:
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Scan'
                Resource: !GetAtt DevicesTable.Arn

  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Auth:
        # Setting 'ApiKeyRequired' to 'true' in the whole API would also
        # require auth at the CORS preflight endpoints (OPTIONS), and we don't
        # want that. Thus, we're defining it on a per-function basis instead.
        UsagePlan:
          CreateUsagePlan: PER_API
      Cors:
        AllowMethods: "'GET,POST,DELETE,OPTIONS'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      GatewayResponses:
        # This makes sure that all 4xx responses sent by API Gateway (e.g.,
        # when API keys are missing or invalid) also include the appropriate
        # CORS headers, so browsers can inspect them and take action.
        DEFAULT_4xx:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"

  GetGeofencesFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.get_geofences
      Role: !GetAtt ApiFunctionsExecutionRole.Arn
      Events:
        GetGeofences:
          Type: Api
          Properties:
            Auth:
              ApiKeyRequired: true
            RestApiId: !Ref Api
            Path: /geofences
            Method: GET

  CreateGeofenceFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.create_geofence
      Role: !GetAtt ApiFunctionsExecutionRole.Arn
      Events:
        CreateGeofence:
          Type: Api
          Properties:
            Auth:
              ApiKeyRequired: true
            RestApiId: !Ref Api
            Path: /geofences
            Method: POST

  DeleteGeofenceFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.delete_geofence
      Role: !GetAtt ApiFunctionsExecutionRole.Arn
      Events:
        DeleteGeofence:
          Type: Api
          Properties:
            Auth:
              ApiKeyRequired: true
            RestApiId: !Ref Api
            Path: /geofences/{id}
            Method: DELETE

  GetDevicesFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.get_devices
      Role: !GetAtt ApiFunctionsExecutionRole.Arn
      Events:
        GetGeofences:
          Type: Api
          Properties:
            Auth:
              ApiKeyRequired: true
            RestApiId: !Ref Api
            Path: /devices
            Method: GET

  CreateDeviceFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.create_device
      Role: !GetAtt ApiFunctionsExecutionRole.Arn
      Events:
        GetGeofences:
          Type: Api
          Properties:
            Auth:
              ApiKeyRequired: true
            RestApiId: !Ref Api
            Path: /devices
            Method: POST

  DeleteDeviceFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.delete_device
      Role: !GetAtt ApiFunctionsExecutionRole.Arn
      Events:
        DeleteGeofence:
          Type: Api
          Properties:
            Auth:
              ApiKeyRequired: true
            RestApiId: !Ref Api
            Path: /devices/{id}
            Method: DELETE

  GetDevicePositionFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.get_device_position
      Role: !GetAtt ApiFunctionsExecutionRole.Arn
      Events:
        GetDevicePosition:
          Type: Api
          Properties:
            Auth:
              ApiKeyRequired: true
            RestApiId: !Ref Api
            Path: /devices/{id}/position
            Method: GET

  SearchPoisFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.search_pois
      Role: !GetAtt ApiFunctionsExecutionRole.Arn
      Events:
        GetDevicePosition:
          Type: Api
          Properties:
            Auth:
              ApiKeyRequired: true
            RestApiId: !Ref Api
            Path: /pois
            Method: GET

  GetRouteFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.get_route
      Role: !GetAtt ApiFunctionsExecutionRole.Arn
      Events:
        GetRoute:
          Type: Api
          Properties:
            Auth:
              ApiKeyRequired: true
            RestApiId: !Ref Api
            Path: /route
            Method: GET

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod/"
  IdentityPoolId:
    Description: "The ID of the Cognito Identity Pool used to authenticate requests from the web app"
    Value: !Ref IdentityPool
