AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Demo app to showcase Amazon Location Service.

Parameters:
  GeofenceCollectionName:
    Type: String
    Description: The name of the geofence collection as defined in Amazon Location Service
  NotificationEmailAddress:
    Type: String
    Description: The email address that will receive notifications when a device enters or exists a geofence
  TrackerName:
    Type: String
    Description: The name of the tracker as defined in Amazon Location Service

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: python3.8
    Timeout: 60
    Environment:
      Variables:
        ALS_DEMO_DDB_TABLE_NAME: !Ref DevicesTable
        ALS_DEMO_GEOFENCE_COLLECTION_NAME: !Ref GeofenceCollectionName
        ALS_DEMO_TRACKER_NAME: !Ref TrackerName
  Api:
    Cors: "'*'"

Resources:
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: true

  IdentityPoolUnauthedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": "unauthenticated"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  IdentityPoolUnauthedRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        "unauthenticated": !GetAtt IdentityPoolUnauthedRole.Arn

  Topic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref NotificationEmailAddress
          Protocol: email

  TopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sns:Publish'
            Resource: '*'
      Topics:
        - !Ref Topic

  GeofenceTriggerRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - 'aws.geo'
        detail-type:
          - 'Location Geofence Event'
      State: ENABLED
      Targets:
        - Arn: !Ref Topic
          Id: EmailNotification

  DevicesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: Devices
      PrimaryKey:
        Name: DeviceId
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # Temporary role with too-wide permissions. Should create one role per
  # function with least privilege principle.
  GenericLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  GetGeofencesFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.get_geofences
      Role: !GetAtt GenericLambdaExecutionRole.Arn
      Events:
        GetGeofences:
          Type: Api
          Properties:
            Path: /geofences
            Method: GET

  CreateGeofenceFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.create_geofence
      Role: !GetAtt GenericLambdaExecutionRole.Arn
      Events:
        CreateGeofence:
          Type: Api
          Properties:
            Path: /geofences
            Method: POST

  DeleteGeofenceFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.delete_geofence
      Role: !GetAtt GenericLambdaExecutionRole.Arn
      Events:
        DeleteGeofence:
          Type: Api
          Properties:
            Path: /geofences/{id}
            Method: DELETE

  GetDevicesFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.get_devices
      Role: !GetAtt GenericLambdaExecutionRole.Arn
      Events:
        GetGeofences:
          Type: Api
          Properties:
            Path: /devices
            Method: GET

  CreateDeviceFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.create_device
      Role: !GetAtt GenericLambdaExecutionRole.Arn
      Events:
        GetGeofences:
          Type: Api
          Properties:
            Path: /devices
            Method: POST

  DeleteDeviceFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.delete_device
      Role: !GetAtt GenericLambdaExecutionRole.Arn
      Events:
        DeleteGeofence:
          Type: Api
          Properties:
            Path: /devices/{id}
            Method: DELETE

  GetDevicePositionFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.get_device_position
      Role: !GetAtt GenericLambdaExecutionRole.Arn
      Events:
        GetDevicePosition:
          Type: Api
          Properties:
            Path: /devices/{id}/position
            Method: GET

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  IdentityPoolId:
    Description: "The ID of the Cognito Identity Pool used to authenticate requests from the web app"
    Value: !Ref IdentityPool
